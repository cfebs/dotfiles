""""""""""""""""""""""""""""""""""""""""""""""""""
" https://github.com/junegunn/vim-plug
"
""""""""""""""""""""""""""""""""""""""""""""""""""
call plug#begin('~/.vim/plugged')

Plug 'craigemery/vim-autotag'
Plug 'kchmck/vim-coffee-script'
Plug 'groenewege/vim-less'
Plug 'altercation/vim-colors-solarized'
Plug 'godlygeek/tabular'
Plug 'tpope/vim-fugitive'
Plug 'tpope/vim-markdown'
Plug 'mattn/emmet-vim'
Plug 'jpo/vim-railscasts-theme'
Plug 'scrooloose/nerdcommenter'
Plug 'aaronbieber/quicktask'
Plug 'itchyny/lightline.vim'
Plug 'nanotech/jellybeans.vim'
Plug 'gcmt/breeze.vim'
Plug 'gregsexton/gitv'
Plug 'ctrlpvim/ctrlp.vim'
Plug 'pangloss/vim-javascript'
Plug 'mxw/vim-jsx'
Plug 'ekalinin/Dockerfile.vim'
Plug 'junegunn/fzf'
Plug 'junegunn/fzf.vim'
Plug 'tweekmonster/fzf-filemru'
Plug 'digitaltoad/vim-pug'
Plug 'cfebs/vim-gh-line'
Plug 'posva/vim-vue'
Plug 'rust-lang/rust.vim'
Plug 'lambdatoast/elm.vim'
Plug 'leafgarland/typescript-vim'
Plug 'hashivim/vim-terraform'
Plug 'c9s/helper.vim'
Plug 'c9s/treemenu.vim'
Plug 'c9s/vikube.vim'
Plug 'junegunn/goyo.vim'
Plug 'ipod825/vim-netranger'


set fileformat=unix
set fileformats=unix,dos

call plug#end()

""""""""""""""""""""""""""""""""""""""""""""""""""
" Fundamentals
""""""""""""""""""""""""""""""""""""""""""""""""""
set nocp
filetype plugin indent on

set guicursor=

set noerrorbells visualbell t_vb=
autocmd GUIEnter * set visualbell t_vb=

set history=10000
"set cursorline
let mapleader = ","
set autoread
set ruler
set backspace=eol,start,indent
set hidden
set scrolloff=3
" Prevent Vim from clobbering the scrollback buffer. See
" http://www.shallowsky.com/linux/noaltscreen.html
set t_ti= t_te=
set shell=bash
set nonu
set mouse-=a

set backupcopy=yes
set backupdir=~/.vim-tmp,~/.tmp,~/tmp,/var/tmp,/tmp
set directory=~/.vim-tmp,~/.tmp,~/tmp,/var/tmp,/tmp

"" Noice
nnoremap ; :

"" Markdown
nmap <leader>1 VypVr=
nmap <leader>2 VypVr-
nmap <leader>3 I### <Esc>
nmap <leader>4 I### <Esc>

"" Pasting
nmap <leader>p :setlocal paste! paste?<cr>

"" Searching
set ignorecase
set smartcase
set hlsearch
set incsearch
set showmatch

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Colors
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

set t_Co=256   " 256 colors
"set t_Co=16
" Usually term not set up for solarized
set background=dark
colorscheme solarized
"colorscheme railscasts
"colorscheme desert
"colorscheme lucius
"colorscheme jellybeans
set nolazyredraw
syntax on

"" Tabbing
set ai
set expandtab
set shiftwidth=4
set tabstop=4
set smarttab

"" Wilds
set wildmenu
set wildmode=longest,list
set wildignore+=*.so,*.swp,*/.git/*,.gitkeep

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"" Status
"" Raw status line ditched for lightline
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"set statusline=\ %{HasPaste()}\ %<%f\ (%{&ft})\ %-4(%m%)%=%-19(%3l,%02c%03V%)
"set statusline+=\ %{fugitive#statusline()}

set laststatus=2

""""""""""""""""""""""""""""""""""""""""""""""""""
"" Experimental Turn OFF
""""""""""""""""""""""""""""""""""""""""""""""""""
"set cpo-=<
"set wcm=<C-Z>

""""""""""""""""""""""""""""""""""""""""""""""""""
"" Auto Commands
""""""""""""""""""""""""""""""""""""""""""""""""""

"" Whitespace
augroup vimrcEx
  autocmd!
  autocmd FileType text setlocal textwidth=78

  " Jump to last cursor position unless it's invalid or in an event handler
  autocmd BufReadPost *
    \ if line("'\"") > 0 && line("'\"") <= line("$") |
    \   exe "normal g`\"" |
    \ endif

  autocmd BufWinEnter * match ExtraWhitespace /\s\+$/
  autocmd InsertEnter * match ExtraWhitespace /\s\+\%#\@<!$/
  autocmd InsertLeave * match ExtraWhitespace /\s\+$/
  autocmd BufWinLeave * call clearmatches()

  "" 4 spaces
  autocmd FileType python,javascript setlocal tabstop=4 softtabstop=4 shiftwidth=4
  "" 2 spaces
  autocmd FileType coffee,ruby,haml,eruby,yaml,html,sass,cucumber,pug setlocal ai sw=2 sts=2 et

  autocmd! BufRead,BufNewFile *.jade set ft=pug
  autocmd! BufRead,BufNewFile *.es6 set ft=javascript.jsx
  autocmd! BufRead,BufNewFile *.sass set ft=sass
  autocmd! BufRead,BufNewFile *.phtml,*.firt set ft=phtml
  autocmd! BufRead,BufNewFile *.fir,*.jhtml set ft=html
  autocmd! BufRead,BufNewFile *.jade set ft=javascript.jsx
augroup end

function! SetLocalTabSize()
    let size = input('Tab Size: ')
    execute "set ts=" . size . " sts=" . size . " sw=" . size
endfunction

highlight ExtraWhitespace ctermbg=red guibg=red
match ExtraWhitespace /\s\+$/
nnoremap <silent> <Leader>ws :let _s=@/<Bar>:%s/\s\+$//e<Bar>:let @/=_s<Bar>:nohl<CR>

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Mappings
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

"" clipboard
if executable('xclip')
    vmap <Leader>xc :w !xclip -selection clipboard<cr>
endif

"" Quick leader functions
nnoremap <leader><leader> <c-^>
nnoremap <leader><cr> :noh<cr>
nnoremap <leader>o :only<cr>
nnoremap <leader>c :clo<cr>
imap <c-c> <esc>


"" Split/window nav
nnoremap <C-j> <C-w>j
nnoremap <C-k> <C-w>k
nnoremap <C-h> <C-w>h
nnoremap <C-l> <C-w>l

"" Quit
nnoremap <C-q> :qall!<CR>

"" Quick file access
nnoremap <leader>sv :source $MYVIMRC<cr>
nnoremap <leader>ev :vsp $MYVIMRC<cr>
nnoremap <leader>eb :vsp ~/.bashrc<cr>
nnoremap <leader>eba :vsp ~/.bash_aliases<cr>

nnoremap <S-h> gT
nnoremap <S-l> gt

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" MULTIPURPOSE TAB KEY
" Indent if we're at the beginning of a line. Else, do completion.
" Not used anymore
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"function! InsertTabWrapper()
    "let col = col('.') - 1
    "if !col || getline('.')[col - 1] !~ '\k'
        "return "\<tab>"
    "else
        "return "\<c-p>"
    "endif
"endfunction
"inoremap <tab> <c-r>=InsertTabWrapper()<cr>
"inoremap <s-tab> <c-n>

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" ARROW KEYS ARE UNACCEPTABLE
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
map <Left> <Nop>
map <Right> <Nop>
map <Up> <Nop>
map <Down> <Nop>

"" %% expands to the current directory
cnoremap %% <C-R>=expand('%:h').'/'<cr>

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" RENAME CURRENT FILE
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
function! RenameFile()
    let old_name = expand('%')
    let new_name = input('New file name: ', expand('%'), 'file')
    if new_name != '' && new_name != old_name
        exec ':saveas ' . new_name
        exec ':silent !rm ' . old_name
        redraw!
    endif
endfunction
map <leader>n :call RenameFile()<cr>


""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Plugins
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" The Silver Searcher
if executable('ag')
  " Use ag over grep
  set grepprg=ag\ --nogroup\ --nocolor

  " Use ag in CtrlP for listing files. Lightning fast and respects .gitignore
  "let g:ctrlp_user_command = 'ag %s -l --nocolor -g ""'

  " ag is fast enough that CtrlP doesn't need to cache
  "let g:ctrlp_use_caching = 0
endif

command! FZFMru call fzf#run({
\ 'source':  reverse(s:all_files()),
\ 'sink':    'edit',
\ 'options': '-m -x +s',
\ 'down':    '40%' })

function! s:all_files()
  return extend(
  \ filter(copy(v:oldfiles),
  \        "v:val !~ 'fugitive:\\|NERD_tree\\|^/tmp/\\|.git/'"),
  \ map(filter(range(1, bufnr('$')), 'buflisted(v:val)'), 'bufname(v:val)'))
endfunction

"" fzf
nmap <silent> <Leader>t :Files<CR>
nmap <silent> <Leader>f :GitFiles<CR>
"nmap <silent> <Leader>d :CtrlPDir<CR>
nmap <silent> <Leader>b :Buffers<CR>
nmap <silent> <Leader>m :CtrlPMRU<CR>

"" ctrlp
"nmap <silent> <Leader>f :CtrlP<CR>
"nmap <silent> <Leader>d :CtrlPDir<CR>
"nmap <silent> <Leader>b :CtrlPBuffer<CR>
"nmap <silent> <Leader>m :CtrlPMRU<CR>
let g:ctrlp_working_path_mode = ''
let g:ctrlp_max_files = 0
let g:ctrlp_custom_ignore = {
  \ 'dir':  '\v[\/]_site|\.(git|hg|svn)|node_modules|source_maps$',
  \ 'file': '\v\.(exe|so|dll|pyc)$',
  \ 'link': 'some_bad_symbolic_links',
  \ }

"" Tabularize
if exists(":Tabularize")
 nmap <Leader>a= :Tabularize /=<CR>
 nmap <Leader>a: :Tabularize /:\zs<CR>
endif

"" Breeze
let g:breeze_active_filetypes = "*.html,*.htm,*.xhtml,*.xml,*.phtml"

"" Fugitive
nmap <silent> <leader>gs :Gstatus<cr>
nmap <silent> <leader>gf :Gdiff<cr>
nmap <silent> <leader>gd :Git diff<cr>
nmap <silent> <leader>gc :Git diff --cached<cr>
nmap <silent> <leader>go :Git commit<cr>
set diffopt+=vertical

"" Gitv
let g:Gitv_DoNotMapCtrlKey = 1

"" Lightline
let g:lightline = {
      \ 'active': {
      \   'left': [ [ 'mode', 'paste' ],
      \             [ 'fugitive', 'readonly', 'filename', 'modified' ] ]
      \ },
      \ 'component': {
      \   'fugitive': '%{exists("*fugitive#head")?fugitive#head():""}'
      \ }
      \ }

" wrap current visual selection in translate calls
function! VisualBlockWrap(left, right)
    if (len(a:left) > 0 && len(a:right) > 0)
        normal `>
        if &selection == 'exclusive'
            exe "normal i".a:right
        else
            exe "normal a".a:right
        endif
        normal `<
        exe "normal i".a:left
        normal `<
    endif
endfunction

function! InsertLogger()
    if (&ft == 'php')
        normal osyslog(LOG_INFO, json_encode([]));
        normal F[
        normal 1l
        startinsert

    elseif (&ft == 'js' || &ft == 'javascript')
        normal oconsole.log();
        normal F(
        normal 1l
        startinsert
    endif
endfunction

function! InsertTemplateTag()
    set nosmarttab
    set noai
    if (&ft == 'phtml')
        normal i<?  ?>
        normal 2h
    endif
    set smarttab
    set ai
endfunction

function! InsertTemplateTagOut()
    set nosmarttab
    set noai
    if (&ft == 'phtml')
        normal i<?=  ?>
        normal 2h
    endif
    set smarttab
    set ai
endfunction

" xmap == only visual mode map, no select mode
xnoremap <leader>vit :call VisualBlockWrap("<?= $this->translate('", "') ?>")<cr>
xnoremap <leader>vir :call VisualBlockWrap("$this->translate('", "')")<cr>

noremap <leader>vt :call InsertTemplateTag()<cr>
noremap <leader>vo :call InsertTemplateTagOut()<cr>
noremap <leader>vl :call InsertLogger()<cr>

""" ag command suffix, [options]
""function! FzfGitCheckouRecentHandler(lines)
""    echom a:lines
""endfunction
""
""function! FzfGitCheckoutRecentRaw()
""  return s:fzf('ag', fzf#vim#wrap({
""  \ 'source':  'git reflog | grep checkout | head -80 | grep moving | pn 8 | grep -v ''^master$'',
""  \ 'sink*':    s:function('FzfGitCheckouRecentHandler'),
""  \ 'options': '--ansi --delimiter : --nth 4..,.. --prompt "Git checkout> " '.
""  \            '--multi --bind alt-a:select-all,alt-d:deselect-all '.
""  \            '--color hl:68,hl+:110'}), a:000)
""endfunction
""nmap <silent> <leader>gc :FzfGitCheckoutRecentRaw<cr>

set listchars=eol:$,tab:>-,trail:~,extends:>,precedes:<

let g:gh_line_map_default = 0
let g:gh_line_map = '<leader>gh'
let g:gh_open_command = 'xdg-open '
let g:gh_use_canonical = 1

let $NVIM_TUI_ENABLE_CURSOR_SHAPE = 0
