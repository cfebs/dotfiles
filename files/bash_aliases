#!/bin/bash

getmakej() {
    echo $(($(nproc) + 1));
}

export EDITOR='vim'

alias makej="make -j$(getmakej)"
alias weather='curl http://wttr.in/'
alias tmux="TERM=screen-256color-bce tmux"

alias tm="tmux"
alias tmn="tmux new-session -s"

alias sshno="ssh -oStrictHostKeyChecking=no -oUserKnownHostsFile=/dev/null"
alias sshbatch="ssh -oStrictHostKeyChecking=no -oUserKnownHostsFile=/dev/null -oConnectTimeout=5 -oBatchMode=yes"

tma() {
    tmux attach -t $(tmux ls | fzf | cut -d: -f1)
}

tmnd() {
    tmux new-session -s $(pwd)
}

sshscreen() {
    # ssh's to the box and runs screen attach
    ssh -t $1 screen -Rad
}

# Quick nav
alias 1="cd ../"
alias 2="cd ../../"
alias 3="cd ../../../"
alias 4="cd ../../../../"
alias ttime="/usr/bin/time"

alias bashrc=". ~/.bashrc"

grep_alias='grep'
if grep --color "a" <<<"a" &>/dev/null; then
    grep_alias="$grep_alias --color=auto"
fi
alias grep="$grep_alias"

alias less="less -R"

# xampp
alias lampp="sudo /opt/lampp/lampp"
if [ -d "$lampp" ]
then
  export LAMPP_HOME="/opt/lampp/lampp"
fi

alias c='clear'
alias bc='bc -l'
alias lh='ls --hide="*.pyc"'
alias l='ls'
alias lsat='ls -at'

hash nvim 2>&1 1>/dev/null && alias vim=nvim
alias vi=vim
alias v=vim
alias svi='sudo vi'
alias vis='vim "+set si"'
alias edit='vim'

alias dmenu="dmenu -b -i -l 15 -fn '-misc-fixed-medium-r-normal--18-*-*-*-*-*-*-*'"
alias dmenu_run="dmenu_run -b -i -l 15 -fn '-misc-fixed-medium-r-normal--18-*-*-*-*-*-*-*'"

# -index_interval duration
#   interval of indexing; 0 for default (5m), negative to only index once at startup
alias localgodoc="godoc -http=:6060 -index -play -index_interval -1m"

alias rm='rm'
# do not delete / or prompt if deleting more than 3 files at a time #
TEST_FILE="$HOME/.rm_preserve_test" && touch $TEST_FILE && rm --preserve-root $TEST_FILE 2> /dev/null && \
    alias rm='rm --preserve-root'

TEST_FILE="$HOME/.rm_preserve_test" && touch $TEST_FILE && rm -I $TEST_FILE 2> /dev/null && \
    alias rm='rm -I'

if [ -f ~/src/etc/git-completion.bash ]
then
    . ~/src/etc/git-completion.bash
    alias g="git"
    __git_complete g _git
fi

# confirmation #
alias mv='mv -i'
alias cp='cp -i'
alias ln='ln -i'

alias clipboard='xclip -se c'

alias upgrade='sudo apt update && sudo apt upgrade -y'
alias sag='sudo apt-get'

alias agi='ag -i --ignore "*.min.js" --ignore "web/assets/fonts/" --ignore "web/assets/js/vendor/" --ignore "web_portfolio/assets/js/jquery*.js"'

## Functions

simp() {
    local port=8181
    local addr='0.0.0.0'

    if python3 --version &> /dev/null
    then
        echo "Python 3"
        python3 -m http.server --bind "$addr" "$port"
    else
        echo "Python 2"
        python -m SimpleHTTPServer "$port"
    fi
}

pn() {
    while read data;
    do
        echo $data | awk "{ print \$$1 }"
        #echo $data | cut -d' ' -f$1
    done
}

g_rlc() {
    git checkout $(git reflog | grep checkout | head -80 | grep moving | pn 8 | grep -v '^master$' | fzf)
}

rvm-project() {
  if [ -z "$1" ]
  then
    echo Need name argument
  else
    mkdir "$1"
    rvm gemset create "$1"
    echo "rvm gemset use $1" > ./$1/.rvmrc
    echo '.rvmrc' >> ./$1/.gitignore
  fi
}

function timer_notify() {
    echo -e "\n\nBOOOM! Time to start."
    notify-send -u critical "`echo BOOOOOOM | figlet`"
}

function timer() {
    MIN=$1 && for i in $(seq $(($MIN*60)) -1 1); do echo -n "$i, "; sleep 1; done; timer_notify;
}

alias ack="ack-grep"
function qfind() {

    [[ -z $1 ]] \
        && echo 'No search param' && return 0

    local q="$1"

    shift

    local dir="$1"

    [[ -z "$dir" ]] && dir="."

    find "$dir" -iname "*$q*"
}

function qgrep() {
    grep -irn "$1" .
}

function net-qual() {
    # 1st arg is the domain to make a HEAD request to
    while true; do echo 'start'; time curl --head "$1"; echo 'finish & sleeping'; sleep 10; done;
}

alias htmlencode="perl -MHTML::Entities -pe 'encode_entities(\$_)'"
alias htmldecode="perl -MHTML::Entities -pe 'decode_entities(\$_)'"

__my_journal() {
    local journal_dir="$HOME/quick_journal"
    local journal_file="$(date +%Y_%m_%d).md"

    if [ ! -d "$journal_dir" ]
    then
        mkdir "$journal_dir";
        echo "Creating $journal_dir"
    fi


    if [ ! -f "$journal_dir/$journal_file" ]
    then
        echo "Creating todays file $journal_file"
        touch "$journal_dir/$journal_file"
    fi

    local content="- \`$(date +%H:%M:%S)\` $@"
    echo "$content" >> "$journal_dir/$journal_file"
    echo "Wrote -> $content to $journal_file"

    return 0;
}

alias j="__my_journal"

dodat() {
    # dodat cmd src_file relative_target
    # dodat cp /tmp/dir/file.txt new_file.txt
    # => cp /tmp/dir/file.txt /tmp/dir/new_file.txt
    # dodat mv /tmp/dir/file.txt new_file.txt
    # => mv /tmp/dir/file.txt /tmp/dir/new_file.txt
    # dodat touch /tmp/dir/file.txt new_file.txt
    # => touch /tmp/dir/new_file.txt
    local cmd="$1"
    local src="$2"
    local target="$3"
    local dest_dir="$(dirname "$src")"
    local result="${dest_dir}/${target}"

    case "$cmd" in
        "cp" | "mv")
            # targets
            $cmd "$src" "$result";
            echo "$cmd $src $result";
            ;;
        "touch")
            $cmd "$result";
            echo "$cmd $result";
            ;;
        *)
            echo "$cmd not supported"
            ;;
    esac
}

mkcp() {
    local src="$1"
    local dest="$2"
    mkdir -pv "$src"
    cp "$src" "$dest"
}

npmbin() {
    $(npm bin)/"$@"
}

# http://www.commandlinefu.com/commands/view/9807/convert-number-of-bytes-to-human-readable-filesize
human_filesize() {
    awk -v sum="$1" ' BEGIN {hum[1024^3]="Gb"; hum[1024^2]="Mb"; hum[1024]="Kb"; for (x=1024^3; x>=1024; x/=1024) { if (sum>=x) { printf "%.2f %s\n",sum/x,hum[x]; break; } } if (sum<1024) print "1kb"; } '
}

pphtml() {
    url="$1"
    shift
    curl -s "$url" | pup --color "$@"
}

human_size() {
pyscript=$(cat <<SCRIPT
def sizeof_fmt(num, suffix='B'):
    for unit in ['','Ki','Mi','Gi','Ti','Pi','Ei','Zi']:
        if abs(num) < 1024.0:
            return "%3.1f%s%s" % (num, unit, suffix)
        num /= 1024.0
    return "%.1f%s%s" % (num, 'Yi', suffix)
print sizeof_fmt($1)
SCRIPT
)
    python -c "$pyscript"
}

set_title()
{
    ORIG=$PS1
    TITLE="\e]2;$*\a"
    PS1=${ORIG}${TITLE}
}

pssh() {
    # $1 some string to eval 'pweb{1..10}'
    # $2 cmd
    # Usage: pssh 'pweb{1..10}' 'hostname'
    echo "Running on $(eval echo $1)..."
    sleep 0.7
    parallel-ssh -O StrictHostKeyChecking=no -i -H "$(eval echo $1)" $2
}

alias sshvpn="ssh -c 3des-cbc"

knownhostsrm() {
    ssh-keygen -f $HOME/.ssh/known_hosts -R $1
    for ip in $(dig +short $1)
    do
        ssh-keygen -f $HOME/.ssh/known_hosts -R $ip
    done
}

sshtun() {
    # $1 hostname
    # $2 host port
    # $3 local port
    if [ $# -lt 3 ]
    then
        echo "\$1 hostname, \$2 host port, \$3 local port"
        return 1
    fi
    ssh -v "$1" -L "$3:$1:$2" -N
}

socksproxy() {
    if [ $# -lt 2 ]
    then
        echo "Usage: socksproxy localport user@host [sshport]"
        echo "    \$1: localport"
        echo "    \$2: login"
        echo "    \$3: sshport (default 22)"
        return 1
    fi

    sshport=${3-22}

    echo "localport: $1, auth: $2, sshport: $sshport"
    ssh -v -N -p "$sshport" -D "0.0.0.0:$1" "$2"
}

lookupip() {
    curl "https://tools.keycdn.com/geo.json?host=$1" | jq .
}

alias randpass="cat /dev/urandom | head -c 15 | base64"
alias proxydrop="socksproxy 9999 collin@proxydrop 222"
