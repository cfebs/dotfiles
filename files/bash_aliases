#!/bin/bash

export EDITOR='vim'

alias tmux="TERM=screen-256color-bce tmux"

# Quick nav
alias 1="cd ../"
alias 2="cd ../../"
alias 3="cd ../../../"
alias 4="cd ../../../../"

alias bashrc=". ~/.bashrc"

grep_alias='grep'
if grep --color "a" <<<"a" &>/dev/null; then
    grep_alias="$grep_alias --color=auto"
fi
alias grep="$grep_alias"

alias less="less -R"

# xampp
alias lampp="sudo /opt/lampp/lampp"
if [ -d "$lampp" ]
then
  export LAMPP_HOME="/opt/lampp/lampp"
fi

alias c='clear'
alias bc='bc -l'
alias lh='ls --hide="*.pyc"'
alias l='ls'

alias vim=nvim
alias vi=vim
alias v=vim
alias svi='sudo vi'
alias vis='vim "+set si"'
alias edit='vim'

alias simple_http="python -m SimpleHTTPServer 4331"
alias simp="$HOME/web/rb/simple-server/simple_server.ru -p 4331"

alias dmenu="dmenu -b -i -l 15 -fn '-misc-fixed-medium-r-normal--18-*-*-*-*-*-*-*'"
alias dmenu_run="dmenu_run -b -i -l 15 -fn '-misc-fixed-medium-r-normal--18-*-*-*-*-*-*-*'"

alias rm='rm'
# do not delete / or prompt if deleting more than 3 files at a time #
TEST_FILE="$HOME/.rm_preserve_test" && touch $TEST_FILE && rm --preserve-root $TEST_FILE 2> /dev/null && \
    alias rm='rm --preserve-root'

TEST_FILE="$HOME/.rm_preserve_test" && touch $TEST_FILE && rm -I $TEST_FILE 2> /dev/null && \
    alias rm='rm -I'

if [ -f ~/src/etc/git-completion.bash ]
then
    . ~/src/etc/git-completion.bash
    alias g="git"
    __git_complete g _git
fi

# confirmation #
alias mv='mv -i'
alias cp='cp -i'
alias ln='ln -i'

alias sag='sudo apt-get'

alias agi='ag -i'

## Functions

pn() {
    while read data;
    do
        echo $data | awk "{ print \$$1 }"
        #echo $data | cut -d' ' -f$1
    done
}

g_rlc() {
    git reflog | grep checkout | head -80 | grep moving | pn 8 | grep -v '^master$' | dmenu
}

rvm-project() {
  if [ -z "$1" ]
  then
    echo Need name argument
  else
    mkdir "$1"
    rvm gemset create "$1"
    echo "rvm gemset use $1" > ./$1/.rvmrc
    echo '.rvmrc' >> ./$1/.gitignore
  fi
}

function timer_notify() {
    echo -e "\n\nBOOOM! Time to start."
    notify-send -u critical "`echo BOOOOOOM | figlet`"
}

function timer() {
    MIN=$1 && for i in $(seq $(($MIN*60)) -1 1); do echo -n "$i, "; sleep 1; done; timer_notify;
}

alias ack="ack-grep"
function qfind() {

    [[ -z $1 ]] \
        && echo 'No search param' && return 0

    local q="$1"

    shift

    local dir="$1"

    [[ -z "$dir" ]] && dir="."

    find "$dir" -iname "*$q*"
}

function qgrep() {
    grep -irn "$1" .
}

function net-qual() {
    # 1st arg is the domain to make a HEAD request to
    while true; do echo 'start'; time curl --head "$1"; echo 'finish & sleeping'; sleep 10; done;
}

alias htmlencode="perl -MHTML::Entities -pe 'encode_entities(\$_)'"
alias htmldecode="perl -MHTML::Entities -pe 'decode_entities(\$_)'"

__my_journal() {
    local journal_dir="$HOME/quick_journal"
    local journal_file="$(date +%Y_%m_%d).md"

    if [ ! -d "$journal_dir" ]
    then
        mkdir "$journal_dir";
        echo "Creating $journal_dir"
    fi


    if [ ! -f "$journal_dir/$journal_file" ]
    then
        echo "Creating todays file $journal_file"
        touch "$journal_dir/$journal_file"
    fi

    local content="- \`$(date +%H:%M:%S)\` $@"
    echo "$content" >> "$journal_dir/$journal_file"
    echo "Wrote -> $content to $journal_file"

    return 0;
}

dodat() {
    # dodat cmd src_file relative_target
    # dodat cp /tmp/dir/file.txt new_file.txt
    # => cp /tmp/dir/file.txt /tmp/dir/new_file.txt
    # dodat mv /tmp/dir/file.txt new_file.txt
    # => mv /tmp/dir/file.txt /tmp/dir/new_file.txt
    # dodat touch /tmp/dir/file.txt new_file.txt
    # => touch /tmp/dir/new_file.txt
    local cmd="$1"
    local src="$2"
    local target="$3"
    local dest_dir="$(dirname "$src")"
    local result="${dest_dir}/${target}"

    case "$cmd" in
        "cp" | "mv")
            # targets
            $cmd "$src" "$result";
            echo "$cmd $src $result";
            ;;
        "touch")
            $cmd "$result";
            echo "$cmd $result";
            ;;
        *)
            echo "$cmd not supported"
            ;;
    esac
}

mkcp() {
    local src="$1"
    local dest="$2"
    mkdir -pv "$src"
    cp "$src" "$dest"
}

