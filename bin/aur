#!/usr/bin/env bash
source ~/bin/.util.sh

action="$1"

_usage() {
	echo "Usage: $(basename $0) upgrade|search|install"
}

_upgrade_pkg() {
	dir="$1"
	pkg="$(basename "$dir")"
	utl_log 'INFO: %s' "Upgrading $pkg"
	cd $dir
	if [[ ! -d ./.git ]]; then
		utl_log 'INFO: %s' "Failed this directory is not a git repo"
		return 1
	fi

	tracked_remote="$(git branch --list "$(git branch --show-current)" "--format=%(upstream:remotename)")"
	utl_log 'INFO: %s' "Using remote ${tracked_remote}"
	local_rev="$(git rev-parse HEAD)"
	if [[ -z "$local_rev" ]]; then
		utl_log 'ERROR: %s' "Failed to get local rev"
		return 1
	fi

	utl_log 'INFO: %s' "Git fetch"
	git fetch
	remote_rev="$(git rev-parse "${tracked_remote}/HEAD")"
	if [[ -z "$remote_rev" ]]; then
		utl_log 'ERROR: %s' "Failed to get remote rev ${tracked_remote}/HEAD"
		return 1
	fi

	if [[ "$local_rev" != "$remote_rev" ]]; then
		utl_log 'INFO: %s' "Local rev does not match remote rev. Updating local pulling."
		utl_log 'DEBUG: %s' "Git reset"
		git reset
		utl_log 'DEBUG: %s' "Git pull"
		git pull
	fi

	installed_pkg_ver="$(pacman -Q $pkg | awk '{print $2}')"
	utl_log 'INFO: %s' "Installed pkg ver $installed_pkg_ver"

	local_pkgver=""
	local_pkgrel=""
	while read -r line; do
		if [[ "$line" =~ ^pkgver=[^=\s]+$ ]]; then
			local_pkgver="${line#pkgver=}"
			continue
		fi
		if [[ "$line" =~ ^pkgrel=[^=\s]+$ ]]; then
			local_pkgrel="${line#pkgrel=}"
			continue
		fi
	done < <(cat ./PKGBUILD)

	if [[ -z "$local_pkgver" ]]; then
		utl_log 'ERROR: %s' "Failed to get local pkgver"
		return 1
	fi

	if [[ -z "$local_pkgrel" ]]; then
		utl_log 'ERROR: %s' "Failed to get local pkgrel"
		return 1
	fi

	local_pkg_ver="${local_pkgver}-${local_pkgrel}"

	if [[ "$local_pkg_ver" == "$installed_pkg_ver" ]]; then
		utl_log 'INFO: Local version %s matches installed version %s. Nothing to do!' "$local_pkg_ver" "$installed_pkg_ver"
		return 0
	fi

	utl_log '%s' "Showing diff for review"
	sleep 0.75
	git diff "HEAD..${tracked_remote}/HEAD" -- ./PKGBUILD
	echo "Confirm upgrade $dir"
	if ! utl_yn_confirm; then
		utl_log '%s' "Not confirmed. Skipping"
		return 0
	fi

	makepkg -si
	sudo pacman -U $(makepkg --packagelist)
}

if [[ "$action" == "upgrade" ]]; then
	mkdir -p "$HOME/aur"

	utl_log 'INFO: %s' "Starting upgrade with ${0}"
	for d in $HOME/aur/*/; do
		_upgrade_pkg "$d"
	done

	exit 0
fi

if [[ "$action" == "search" ]]; then
	# {
	#   "Description": "Feature packed AUR helper",
	#   "FirstSubmitted": 1603068527,
	#   "ID": 927488,
	#   "LastModified": 1624884796,
	#   "Maintainer": "Morganamilo",
	#   "Name": "paru-git",
	#   "NumVotes": 18,
	#   "OutOfDate": null,
	#   "PackageBase": "paru-git",
	#   "PackageBaseID": 158892,
	#   "Popularity": 0.361562,
	#   "URL": "https://github.com/morganamilo/paru",
	#   "URLPath": "/cgit/aur.git/snapshot/paru-git.tar.gz",
	#   "Version": "1.7.3.r22.g1ed1f29-1"
	# },

	query="$2"
	utl_log '%s' "Searching aur for: $query"
	curl -sL -G --data-urlencode "arg=$query" 'https://aur.archlinux.org/rpc/?v=5&type=search' \
		| jq -r '.results[] | "name: \(.Name), votes: \(.NumVotes), modified: \(.LastModified |  strftime("%Y-%m-%d"))"'

	exit 0
fi

if [[ "$action" == "install" ]]; then
	mkdir -p "$HOME/aur"

	pkg="$2"
	utl_log '%s' "Installing $pkg"
	cd "$HOME/aur"
	if [[ ! -d "$HOME/aur/$pkg" ]]; then
		git clone "https://aur.archlinux.org/${pkg}.git"
		rc=$?
		if [[ $rc != 0 ]]; then
			utl_log '%s' "Failed to clone with return status $rc"
			exit 1
		fi
	fi

	cd "${pkg}"
	git pull

	makepkg -si
	sudo pacman -U $(makepkg --packagelist)
	exit 0
fi

_usage
