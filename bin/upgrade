#!/usr/bin/env bash
source ~/bin/.util.sh

run_upgrade_pkgs() {
	(
		set -e
		# elevate with a noop
		sudo cat /dev/null
		if [[ $? != 0 ]]; then
			utl_echoerr ">> No sudo. Exiting..."
			exit 1
		fi

		if utl_cmd_exists snap; then
			utl_echoerr ">> Upgrading snaps"
			sudo snap refresh
		fi

		if utl_cmd_exists flatpak; then
			utl_echoerr ">> Upgrading flatpack"
			sudo flatpak update
			sudo flatpak uninstall --unused
		fi

		if grep -i -q "DISTRIB_ID=[\"']*Arch" /etc/lsb-release; then
			utl_echoerr ">> Upgrading archlinux"

			utl_echoerr ">> Syncing archlinux-keyring"
			sudo pacman -Sy --noconfirm archlinux-keyring

			if utl_cmd_exists paru; then
				utl_echoerr ">> Upgrading paru"
				paru
			elif utl_cmd_exists yay; then
				utl_echoerr ">> Upgrading yay"
				yay
			else
				utl_echoerr ">> Upgrading pacman"
				sudo pacman -Syu
			fi

			if utl_cmd_exists paccache; then
				utl_echoerr ">> Running paccache cleanup"
				local paccache_cmd="paccache -k 3 -r -c $(pacman-conf CacheDir)"
				# handle paru clone dirs
				for d in "${XDG_CACHE_HOME:-$HOME/.cache}"/paru/clone/*/; do
				  paccache_cmd="$paccache_cmd -c $d"
				done
				eval "$paccache_cmd"
			fi


			if utl_cmd_exists pacdiff; then
				utl_echoerr ">> Running pacdiff"
				#if utl_cmd_exists meld; then
				#    DIFFPROG=/usr/bin/meld sudo -E pacdiff
				#elif utl_cmd_exists vimdiff; then
				#    DIFFPROG=/usr/bin/vimdiff sudo -E pacdiff
				if utl_cmd_exists nvim; then
					sudo -H -E DIFFPROG='nvim -d' pacdiff
				elif utl_cmd_exists vimdiff; then
					sudo -H -E pacdiff
				else
					utl_echoerr ">> ERROR: no good diff programs"
					return 1
				fi
			fi
		fi

		if utl_cmd_exists apt; then
			utl_echoerr ">> Upgrading apt"
			sudo apt update && sudo apt upgrade
		fi
	)
	rc=$?
	utl_echoerr ">> ${FUNCNAME[0]} function returned with code $?"
	return $rc
}

run_ansible() {
	(
		set -e
		if ! utl_cmd_exists git; then
			utl_echoerr ">> ERROR ansible: Git is not installed"
			return 1;
		fi

		if [[ ! -d "$HOME/src/ansibles" ]]; then
			utl_echoerr ">> No ansible dir, skipping"
			return 0;
		fi

		utl_echoerr ">> Checking for ansible run"
		pushd "$HOME/src/ansibles" 1>/dev/null
		if [[ ! -z "$(git status --untracked-files=no --porcelain)" ]]; then
			utl_echoerr ">> WARNING: Ansible git not clean, not running"
			return 0
		fi

		utl_echoerr ">> Running ansible"
		git pull
		sudo make this-no-become

		utl_echoerr ">> Updating vim plugins"
		# Vim update plugins:
		# - Plug
		# - vim-go
		if utl_cmd_exists nvim; then
			(
			nvim +PlugInstall +PlugUpdate +qall;
			nvim +GoInstallBinaries +qall;
			exit 0;
		)
		elif utl_cmd_exists vim; then
			(
				vim +PlugInstall +PlugUpdate +qall;
				vim +GoInstallBinaries +qall;
				exit 0;
			)
		fi
			popd 1>/dev/null
	)
	rc=$?
	utl_echoerr ">> ${FUNCNAME[0]} function returned with code $?"
	return $rc
}

usage() {
	utl_echoerr "Usage: upgrade [OPTION]"
	utl_echoerr "Options:"
	utl_echoerr -e "  -s\tskip ansible"
}

main() {
	local cli_skip_ansible=0

	while [[ "$#" -gt 0 ]]; do
		case $1 in
			#-t|--target) target="$2"; shift ;;
			#-u|--uglify) uglify=1 ;;
			-s) cli_skip_ansible=1 ;;
			-h|--help) usage; exit 0 ;;
			*) echo "Unknown parameter passed: $1"; usage; exit 1 ;;
		esac
		shift
	done

	run_upgrade_pkgs || return $?
	if [ "$cli_skip_ansible" = "0" ]; then
		run_ansible || return $?
	else
		utl_echoerr ">> Skipping ansible with -s"
		return 0
	fi
}

main "$@"
rc=$?
utl_echoerr ">> Finished with code $rc"
exit $?
