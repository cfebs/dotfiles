#!/usr/bin/env bash

FILE_KEY="$1"
shift 1

if [[ -z "$FILE_KEY" ]]; then
    echo "Usage: $0 <unique-file-key> <expire_seconds_in_future> ...curl opts" 1>&2
    echo "Will use curl and store output of file for expire_seconds_in_future seconds" 1>&2
fi

TRACKING_DIR="${TMPDIR:-/tmp}/curl-newer"
CACHED_FILE="$TRACKING_DIR/$FILE_KEY"
CACHED_FILE_ERR="$TRACKING_DIR/${FILE_KEY}_err"

SECONDS="${1-0}"
shift 1

DO_FETCH=

if [[ -s "$CACHED_FILE_ERR" ]]; then
    # if last attempt was an error, always fetch
    DO_FETCH=1
elif [[ ! -s "$CACHED_FILE" ]]; then
    # if no existing cached file, fetch
    DO_FETCH=1
else
    # date of cache is < now
    EXPIRES=$(($(date -r "$CACHED_FILE" +%s) + SECONDS))
    echo ">> $CACHED_FILE set to expires at $EXPIRES" 1>&2
    if [[ $EXPIRES < $(date +%s) ]]; then
        echo ">> It expired" 1>&2
        DO_FETCH=1
    fi
fi

if [[ "$DO_FETCH" ]]; then
    echo ">> Fetching $CACHED_FILE" 1>&2
    mkdir -p "$TRACKING_DIR"
    curl -o "$CACHED_FILE" -L "$@"
    rc=$?
    if [[ $rc != 0 ]]; then
        echo ">> Error $rc, marking $CACHED_FILE_ERR so next try will fetch" 1>&2
        touch "$CACHED_FILE_ERR"
    fi
fi

echo "$CACHED_FILE"
